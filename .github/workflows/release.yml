name: release

on:
  push:
    tags:
      - "v[0-9]+"
    branches:
      - release/*

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      issue-number: ${{ steps.get-issue-number.outputs.result }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install -g auto-changelog
      - name: Create Release Issue
        if: github.ref_type == 'tag'
        run: |
          ISSUE_TITLE=$(git tag $GITHUB_REF_NAME -l --format 'Release %(refname:short) by %(authorname)')
          ISSUE_BODY=$(npx auto-changelog --commit-limit false --template keepachangelog --hide-credit --sort-commits date-desc --stdout --starting-version $GITHUB_REF_NAME --ending-version $GITHUB_REF_NAME)
          gh issue create -t "$ISSUE_TITLE" -b "$ISSUE_BODY" -l "RELEASE"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release Branch
        if: github.ref_type == 'tag'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          RELEASE_BRANCH=release/$GITHUB_REF_NAME
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
          git branch $RELEASE_BRANCH $GITHUB_REF_NAME
          git push origin $RELEASE_BRANCH
      - name: Set Tag Name
        run: |
          TAG_NAME=$(echo $GITHUB_REF_NAME | cut -d'/' -f2)
          echo $TAG_NAME
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
      - name: Find Release Issue
        id: find-issue
        uses: actions-cool/issues-helper@v3
        with:
          actions: "find-issues"
          token: ${{ secrets.GITHUB_TOKEN }}
          title-includes: "${{ env.TAG_NAME }}"
          issue-state: "all"
          labels: "RELEASE"
      - name: Get Release Issue Number
        id: get-issue-number
        uses: actions/github-script@v6
        with:
          script: |
            console.log(${{ steps.find-issue.outputs.issues }});
            const issues = ${{ steps.find-issue.outputs.issues }};
            if (!issues.length) {
              throw Error("release issue not found");
            }
            const issue = issues[0];
            return issue.number;
      - name: Edit Release Issue
        if: github.ref_type == 'branch'
        run: |
          COMMENT_BODY=$(npx auto-changelog --commit-limit false --hide-credit --sort-commits date-desc --stdout --unreleased-only)
          echo "${{ steps.get-issue-number.outputs.result }}"
          gh issue reopen ${{ steps.get-issue-number.outputs.result }}
          gh issue comment ${{ steps.get-issue-number.outputs.result }} -b "$COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  validate:
    needs: release
    uses: ./.github/workflows/validate.yml
  comment-test-result:
    if: ${{ always() }}
    needs: [release, validate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Comment Release Issue
        run: |
          COMMENT_BODY='Test results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          gh issue comment ${{ needs.release.outputs.issue-number }} -b "$COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    needs: [release, validate, comment-test-result]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: "./build"

  deploy:
    needs: build
    outputs:
      page-url: ${{ steps.deployment.outputs.page_url }}

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  comment-deploy:
    if: always()
    needs: [release, deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set Success Message
        if: needs.deploy.result == 'success'
        run: |
          COMMENT_BODY='Deploy success: ${{ needs.deploy.outputs.page-url }}'
          echo "COMMENT_BODY=$COMMENT_BODY" >> $GITHUB_ENV
      - name: Set Failure Message
        if: needs.deploy.result != 'success'
        run: |
          COMMENT_BODY='Deploy failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          echo "COMMENT_BODY=$COMMENT_BODY" >> $GITHUB_ENV
      - name: Comment Release Issue
        run: |
          gh issue comment ${{ needs.release.outputs.issue-number }} -b "${{ env.COMMENT_BODY }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Close Release Issue
        if: needs.deploy.result == 'success'
        run: |
          gh issue close ${{ needs.release.outputs.issue-number }} -r completed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
